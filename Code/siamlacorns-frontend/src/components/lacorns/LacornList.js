// LacornList.js (–æ–±–Ω–æ–≤–ª—ë–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è)
import React, { useState, useEffect } from 'react';
import { lacornService } from '../../services/lacorns';
import LacornCard from './LacornCard';
import LoadingSpinner from '../common/LoadingSpinner';
import './LacornList.css';

const LacornList = () => {
  const [lacorns, setLacorns] = useState([]);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState(null);
  const [searchQuery, setSearchQuery] = useState('');
  const [selectedGenre, setSelectedGenre] = useState('');

  const genres = [
    '–î—Ä–∞–º–∞', '–ö–æ–º–µ–¥–∏—è', '–ë–æ–µ–≤–∏–∫', '–§—ç–Ω—Ç–µ–∑–∏', '–ù–∞—É—á–Ω–∞—è —Ñ–∞–Ω—Ç–∞—Å—Ç–∏–∫–∞',
    '–£–∂–∞—Å—ã', '–†–æ–º–∞–Ω—Ç–∏–∫–∞', '–î–µ—Ç–µ–∫—Ç–∏–≤', '–¢—Ä–∏–ª–ª–µ—Ä', '–ü—Ä–∏–∫–ª—é—á–µ–Ω–∏—è'
  ];

  useEffect(() => {
    loadLacorns();
  }, []);

  const loadLacorns = async () => {
    try {
      setLoading(true);
      const data = await lacornService.getAllLacorns();
      setLacorns(data.content || data);
    } catch (err) {
      setError('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å–µ—Ä–∏–∞–ª–æ–≤');
      console.error('Error loading lacorns:', err);
    } finally {
      setLoading(false);
    }
  };

  const handleSearch = async (e) => {
    e.preventDefault();
    if (!searchQuery.trim()) {
      loadLacorns();
      return;
    }

    try {
      setLoading(true);
      const data = await lacornService.searchLacorns(searchQuery);
      setLacorns(data.content || data);
    } catch (err) {
      setError('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ');
      console.error('Error searching lacorns:', err);
    } finally {
      setLoading(false);
    }
  };

  const handleGenreSelect = async (genre) => {
    setSelectedGenre(genre);
    try {
      setLoading(true);
      const data = await lacornService.getLacornsByGenre(genre);
      setLacorns(data);
    } catch (err) {
      setError('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –ø–æ –∂–∞–Ω—Ä—É');
      console.error('Error filtering by genre:', err);
    } finally {
      setLoading(false);
    }
  };

  const clearFilters = () => {
    setSearchQuery('');
    setSelectedGenre('');
    loadLacorns();
  };

  if (loading) {
    return (
      <div className="loading-container">
        <LoadingSpinner size="large" text="–ó–∞–≥—Ä—É–∑–∫–∞ —Å–µ—Ä–∏–∞–ª–æ–≤..." />
      </div>
    );
  }

  return (
    <div className="lacorn-list-container">
      <div className="lacorn-list-header">
        <h1>–í—Å–µ —Å–µ—Ä–∏–∞–ª—ã</h1>

        {/* –ü–æ–∏—Å–∫ */}
        <form onSubmit={handleSearch} className="search-form">
          <input
            type="text"
            placeholder="–ü–æ–∏—Å–∫ —Å–µ—Ä–∏–∞–ª–æ–≤..."
            value={searchQuery}
            onChange={(e) => setSearchQuery(e.target.value)}
            className="search-input"
          />
          <button type="submit" className="search-button">
            üîç
          </button>
        </form>

        {/* –§–∏–ª—å—Ç—Ä—ã –ø–æ –∂–∞–Ω—Ä–∞–º */}
        <div className="genre-filters">
          <h3>–ñ–∞–Ω—Ä—ã:</h3>
          <div className="genre-buttons">
            {genres.map(genre => (
              <button
                key={genre}
                onClick={() => handleGenreSelect(genre)}
                className={`genre-button ${selectedGenre === genre ? 'active' : ''}`}
              >
                {genre}
              </button>
            ))}
          </div>
          {(searchQuery || selectedGenre) && (
            <button onClick={clearFilters} className="clear-filters">
              –û—á–∏—Å—Ç–∏—Ç—å —Ñ–∏–ª—å—Ç—Ä—ã
            </button>
          )}
        </div>
      </div>

      {error && (
        <div className="error-message">
          {error}
          <button onClick={loadLacorns} className="retry-button">
            –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞
          </button>
        </div>
      )}

      <div className="lacorn-grid">
        {lacorns && lacorns.length > 0 ? (
          lacorns.map(lacorn => (
            <LacornCard key={lacorn.id} lacorn={lacorn} />
          ))
        ) : (
          <div className="no-results">
            <h3>–°–µ—Ä–∏–∞–ª—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã</h3>
            <p>–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–æ–∏—Å–∫–∞</p>
          </div>
        )}
      </div>
    </div>
  );
};

export default LacornList;